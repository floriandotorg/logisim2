import _ from 'lodash';
import React, { useState } from 'react';

// not in use currently but hard to come by
const jp = [
  [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
  [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
  [],
  [4, 4, 4, 4, 0, 0, 4], // !
  [10, 10, 10], // "
  [10, 10, 31, 10, 31, 10, 10], // #
  [4, 15, 20, 14, 5, 30, 4], // $
  [24, 25, 2, 4, 8, 19, 3], // %
  [12, 18, 20, 8, 21, 18, 13], // &
  [12, 4, 8], // '
  [2, 4, 8, 8, 8, 4, 2], // (
  [8, 4, 2, 2, 2, 4, 8], // )
  [0, 4, 21, 14, 21, 4], // *
  [0, 4, 4, 31, 4, 4], // +
  [0, 0, 0, 0, 12, 4, 8], // ,
  [0, 0, 0, 31], // -
  [0, 0, 0, 0, 0, 12, 12], // .
  [0, 1, 2, 4, 8, 16], // /
  [14, 17, 19, 21, 25, 17, 14], // 0
  [4, 12, 4, 4, 4, 4, 14], // 1
  [14, 17, 1, 2, 4, 8, 31], // 2
  [31, 2, 4, 2, 1, 17, 14], // 3
  [2, 6, 10, 18, 31, 2, 2], // 4
  [31, 16, 30, 1, 1, 17, 14], // 5
  [6, 8, 16, 30, 17, 17, 14], // 6
  [31, 1, 2, 4, 8, 8, 8], // 7
  [14, 17, 17, 14, 17, 17, 14], // 8
  [14, 17, 17, 15, 1, 2, 12], // 9
  [0, 12, 12, 0, 12, 12], // :
  [0, 12, 12, 0, 12, 4, 8], // ;
  [2, 4, 8, 16, 8, 4, 2], // <
  [0, 0, 31, 0, 31], // =
  [8, 4, 2, 1, 2, 4, 8], // >
  [14, 17, 1, 2, 4, 0, 4], // ?
  [14, 17, 1, 13, 21, 21, 14], // @
  [14, 17, 17, 31, 17, 17, 17], // A
  [30, 17, 17, 30, 17, 17, 30], // B
  [14, 17, 16, 16, 16, 17, 14], // C
  [28, 18, 17, 17, 17, 18, 28], // D
  [31, 16, 16, 30, 16, 16, 31], // E
  [31, 16, 16, 30, 16, 16, 16], // F
  [14, 17, 16, 23, 17, 17, 15], // G
  [17, 17, 17, 31, 17, 17, 17], // H
  [14, 4, 4, 4, 4, 4, 14], // I
  [14, 2, 2, 2, 2, 18, 12], // J
  [17, 18, 20, 24, 20, 18, 17], // K
  [16, 16, 16, 16, 16, 16, 31], // L
  [17, 27, 21, 21, 17, 17, 17], // M
  [17, 17, 25, 21, 19, 17, 17], // N
  [14, 17, 17, 17, 17, 17, 14], // O
  [30, 17, 17, 30, 16, 16, 16], // P
  [14, 17, 17, 17, 21, 18, 13], // Q
  [30, 17, 17, 30, 20, 18, 17], // R
  [15, 16, 16, 14, 1, 1, 30], // S
  [31, 4, 4, 4, 4, 4, 4], // T
  [17, 17, 17, 17, 17, 17, 14], // U
  [17, 17, 17, 17, 17, 10, 4], // V
  [17, 17, 17, 21, 21, 21, 10], // W
  [17, 17, 10, 4, 10, 17, 17], // X
  [17, 17, 17, 10, 4, 4, 4], // Y
  [31, 1, 2, 4, 8, 16, 31], // Z
  [14, 8, 8, 8, 8, 8, 14], // [
  [17, 10, 31, 4, 31, 4, 4], // Yen
  [14, 2, 2, 2, 2, 2, 14], // ]
  [4, 10, 17], // ^
  [0, 0, 0, 0, 0, 0, 31], // _
  [8, 4, 2], // `
  [0, 0, 14, 1, 15, 17, 15], // a
  [16, 16, 22, 25, 17, 17, 30], // b
  [0, 0, 14, 16, 16, 17, 14], // c
  [1, 1, 13, 19, 17, 17, 15], // d
  [0, 0, 14, 17, 31, 16, 14], // e
  [6, 9, 8, 28, 8, 8, 8], // f
  [0, 15, 17, 17, 15, 1, 14], // g
  [16, 16, 22, 25, 17, 17, 17], // h
  [4, 0, 12, 4, 4, 4, 14], // i
  [2, 0, 6, 2, 2, 18, 12], // j
  [16, 16, 18, 20, 24, 20, 18], // k
  [12, 4, 4, 4, 4, 4, 31], // l
  [0, 0, 26, 21, 21, 17, 17], // m
  [0, 0, 22, 25, 17, 17, 17], // n
  [0, 0, 14, 17, 17, 17, 14], // o
  [0, 0, 30, 17, 30, 16, 16], // p
  [0, 0, 13, 19, 15, 1, 1], // q
  [0, 0, 22, 25, 16, 16, 16], // r
  [0, 0, 14, 16, 14, 1, 30], // s
  [8, 8, 28, 8, 8, 9, 6], // t
  [0, 0, 17, 17, 17, 19, 13], // u
  [0, 0, 17, 17, 17, 10, 4], // v
  [0, 0, 17, 17, 21, 21, 10], // w
  [0, 0, 17, 10, 4, 10, 17], // x
  [0, 0, 17, 17, 15, 1, 14], // y
  [0, 0, 31, 2, 4, 8, 31], // z
  [2, 4, 4, 8, 4, 4, 2], // {
  [4, 4, 4, 4, 4, 4, 4], // |
  [8, 4, 4, 2, 4, 4, 8], // }
  [0, 4, 2, 31, 2, 4], // ->
  [0, 4, 8, 31, 8, 4], // <-
  [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
  [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
  [],
  [0, 0, 0, 0, 28, 20, 28],
  [7, 4, 4, 4],
  [0, 0, 0, 4, 4, 4, 28],
  [0, 0, 0, 0, 16, 8, 4],
  [0, 0, 0, 12, 12],
  [0, 31, 1, 31, 1, 2, 4],
  [0, 0, 31, 1, 6, 4, 8],
  [0, 0, 2, 4, 12, 20, 4],
  [0, 0, 4, 31, 17, 1, 14],
  [0, 0, 0, 31, 4, 4, 31],
  [0, 0, 2, 31, 6, 10, 18],
  [0, 0, 8, 31, 9, 10, 8],
  [0, 0, 0, 14, 2, 2, 31],
  [0, 0, 30, 2, 30, 2, 30],
  [0, 0, 0, 21, 21, 1, 6],

  [0, 0, 0, 31],
  [31, 1, 5, 6, 4, 4, 8],
  [1, 2, 4, 12, 20, 4, 4],
  [4, 31, 17, 17, 1, 2, 4],
  [0, 31, 4, 4, 4, 4, 31],
  [2, 31, 2, 6, 10, 18, 2],
  [8, 31, 9, 9, 9, 9, 18],
  [4, 31, 4, 31, 4, 4, 4],
  [0, 15, 9, 17, 1, 2, 12],
  [8, 15, 18, 2, 2, 2, 4],
  [0, 31, 1, 1, 1, 1, 31],
  [10, 31, 10, 10, 2, 4, 8],
  [0, 24, 1, 25, 1, 2, 28],
  [0, 31, 1, 2, 4, 10, 17],
  [8, 31, 9, 10, 8, 8, 7],
  [0, 17, 17, 9, 1, 2, 12],

  [0, 15, 9, 21, 3, 2, 12],
  [2, 28, 4, 31, 4, 4, 8],
  [0, 21, 21, 21, 1, 2, 4],
  [14, 0, 31, 4, 4, 4, 8],
  [8, 8, 8, 12, 10, 8, 8],
  [4, 4, 31, 4, 4, 8, 16],
  [0, 14, 0, 0, 0, 0, 31],
  [0, 31, 1, 10, 4, 10, 16],
  [4, 31, 2, 4, 14, 21, 4],
  [2, 2, 2, 2, 2, 4, 8],
  [0, 4, 2, 17, 17, 17, 17],
  [16, 16, 31, 16, 16, 16, 15],
  [0, 31, 1, 1, 1, 2, 12],
  [0, 8, 20, 2, 1, 1],
  [4, 31, 4, 4, 21, 21, 4],
  [0, 31, 1, 1, 10, 4, 2],

  [0, 14, 0, 14, 0, 14, 1],
  [0, 4, 8, 16, 17, 31, 1],
  [0, 1, 1, 10, 4, 10, 16],
  [0, 31, 8, 31, 8, 8, 7],
  [8, 8, 31, 9, 10, 8, 8],
  [0, 14, 2, 2, 2, 2, 31],
  [0, 31, 1, 31, 1, 1, 31],
  [14, 0, 31, 1, 1, 2, 4],
  [18, 18, 18, 18, 2, 4, 8],
  [0, 4, 20, 20, 21, 21, 22],
  [0, 16, 16, 17, 18, 20, 24],
  [0, 31, 17, 17, 17, 17, 31],
  [0, 31, 17, 17, 1, 2, 4],
  [0, 24, 0, 1, 1, 2, 28],
  [4, 18, 8],
  [28, 20, 28],

  [0, 0, 9, 21, 18, 18, 13], // alpha
  [10, 0, 14, 1, 15, 17, 15], // a:
  [0, 0, 14, 17, 30, 17, 30, 16, 16, 16], // beta
  [0, 0, 14, 16, 12, 17, 14], // epsilon
  [0,0, 17, 17, 17, 19, 29, 16, 16, 16], // mu
  [0, 0, 15, 20, 18, 17, 14], // sigma
  [0, 0, 6, 9, 17, 17, 30, 16, 16, 16], // ro
  [0, 0, 15, 17, 17, 17, 15, 1, 1, 14], // g
  [0, 0, 7, 4, 4, 20, 8], // sq root
  [0, 2, 26, 2], // -1
  [2, 0, 6, 2, 2, 2, 2, 2, 18, 12], // j
  [0, 20, 8, 20], // x
  [0, 4, 14, 20, 21, 14, 4], // cent
  [8, 8, 28, 8, 28, 8, 15], // poud
  [14, 0, 22, 25, 17, 17, 17], // n~
  [10, 0, 14, 17, 17, 17, 14], // o:
  [0, 0, 22, 25, 17, 17, 30, 16, 16, 16], // p
  [0, 0, 13, 19, 17, 17, 15, 1, 1, 1], // q
  [0, 14, 17, 31, 17, 17, 14], // theta
  [0, 0, 0, 11, 21, 26], // inf
  [0, 0, 14, 17, 17, 10, 27], // Omega
  [10, 0, 17, 17, 17, 19, 13], // u:
  [31, 16, 8, 4, 8, 16, 31], // Sigma
  [0, 0, 31, 10, 10, 10, 19], // pi
  [31, 0, 17, 10, 4, 10, 17], // x-
  [0, 0, 17, 17, 17, 17, 15, 1, 1, 14], // y
  [0, 1, 30, 4, 31, 4, 4],
  [0, 0, 31, 8, 15, 9, 17],
  [0, 0, 31, 21, 31, 17, 17], // yen
  [0, 0, 4, 0, 31, 0, 4], // :-
  [],
  [31, 31, 31, 31, 31, 31, 31, 31, 31, 31]
];

const eu = [
  [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
  [0, 8, 12, 14, 15, 14, 12, 8], // |>
  [0, 2, 6, 14, 30, 14, 6, 2], // <|
  [0, 9, 18, 27], // ``
  [0, 27, 9, 18], // ''
  [0, 4, 14, 31, 0, 4, 14, 31],
  [0, 31, 14, 4, 0, 31, 14, 4],
  [0, 0, 14, 31, 31, 31, 14],
  [0, 1, 1, 5, 9, 31, 8, 4], // return
  [0, 4, 14, 21, 4, 4, 4, 4], // up
  [0, 4, 4, 4, 4, 21, 14, 4], // down
  [0, 0, 4, 2, 31, 2, 4], // ->
  [0, 0, 4, 8, 31, 8, 4], // <-
  [0, 2, 4, 8, 4, 2, 0, 31], // <=
  [0, 8, 4, 2, 4, 8, 0, 31], // >=
  [0, 0, 4, 4, 14, 14, 31],
  [0, 0, 31, 14, 14, 4, 4],
  [],
  [0, 4, 4, 4, 4, 0, 0, 4], // !
  [0, 10, 10, 10], // "
  [0, 10, 10, 31, 10, 31, 10, 10], // #
  [0, 4, 15, 20, 14, 5, 30, 4], // $
  [0, 24, 25, 2, 4, 8, 19, 3], // %
  [0, 12, 18, 20, 8, 21, 18, 13], // &
  [0, 12, 4, 8], // '
  [0, 2, 4, 8, 8, 8, 4, 2], // (
  [0, 8, 4, 2, 2, 2, 4, 8], // )
  [0, 0, 4, 21, 14, 21, 4], // *
  [0, 0, 4, 4, 31, 4, 4], // +
  [0, 0, 0, 0, 0, 12, 4, 8], // ,
  [0, 0, 0, 0, 31], // -
  [0, 0, 0, 0, 0, 0, 12, 12], // .
  [0, 0, 1, 2, 4, 8, 16], // /
  [0, 14, 17, 19, 21, 25, 17, 14], // 0
  [0, 4, 12, 4, 4, 4, 4, 14], // 1
  [0, 14, 17, 1, 2, 4, 8, 31], // 2
  [0, 31, 2, 4, 2, 1, 17, 14], // 3
  [0, 2, 6, 10, 18, 31, 2, 2], // 4
  [0, 31, 16, 30, 1, 1, 17, 14], // 5
  [0, 6, 8, 16, 30, 17, 17, 14], // 6
  [0, 31, 1, 2, 4, 8, 8, 8], // 7
  [0, 14, 17, 17, 14, 17, 17, 14], // 8
  [0, 14, 17, 17, 15, 1, 2, 12], // 9
  [0, 0, 12, 12, 0, 12, 12], // :
  [0, 0, 12, 12, 0, 12, 4, 8], // ;
  [0, 2, 4, 8, 16, 8, 4, 2], // <
  [0, 0, 0, 31, 0, 31], // =
  [0, 8, 4, 2, 1, 2, 4, 8], // >
  [0, 14, 17, 1, 2, 4, 0, 4], // ?
  [0, 14, 17, 1, 13, 21, 21, 14], // @
  [0, 4, 10, 17, 17, 31, 17, 17], // A
  [0, 30, 17, 17, 30, 17, 17, 30], // B
  [0, 14, 17, 16, 16, 16, 17, 14], // C
  [0, 28, 18, 17, 17, 17, 18, 28], // D
  [0, 31, 16, 16, 30, 16, 16, 31], // E
  [0, 31, 16, 16, 30, 16, 16, 16], // F
  [0, 14, 17, 16, 23, 17, 17, 15], // G
  [0, 17, 17, 17, 31, 17, 17, 17], // H
  [0, 14, 4, 4, 4, 4, 4, 14], // I
  [0, 14, 2, 2, 2, 2, 18, 12], // J
  [0, 17, 18, 20, 24, 20, 18, 17], // K
  [0, 16, 16, 16, 16, 16, 16, 31], // L
  [0, 17, 27, 21, 21, 17, 17, 17], // M
  [0, 17, 17, 25, 21, 19, 17, 17], // N
  [0, 14, 17, 17, 17, 17, 17, 14], // O
  [0, 30, 17, 17, 30, 16, 16, 16], // P
  [0, 14, 17, 17, 17, 21, 18, 13], // Q
  [0, 30, 17, 17, 30, 20, 18, 17], // R
  [0, 15, 16, 16, 14, 1, 1, 30], // S
  [0, 31, 4, 4, 4, 4, 4, 4], // T
  [0, 17, 17, 17, 17, 17, 17, 14], // U
  [0, 17, 17, 17, 17, 17, 10, 4], // V
  [0, 17, 17, 17, 21, 21, 21, 10], // W
  [0, 17, 17, 10, 4, 10, 17, 17], // X
  [0, 17, 17, 17, 10, 4, 4, 4], // Y
  [0, 31, 1, 2, 4, 8, 16, 31], // Z
  [0, 14, 8, 8, 8, 8, 8, 14], // [
  [0, 0, 16, 8, 4, 2, 1], // \
  [0, 14, 2, 2, 2, 2, 2, 14], // ]
  [0, 4, 10, 17], // ^
  [0, 0, 0, 0, 0, 0, 0, 31], // _
  [0, 8, 4, 2], // `
  [0, 0, 0, 14, 1, 15, 17, 15], // a
  [0, 16, 16, 22, 25, 17, 17, 30], // b
  [0, 0, 0, 14, 16, 16, 17, 14], // c
  [0, 1, 1, 13, 19, 17, 17, 15], // d
  [0, 0, 0, 14, 17, 31, 16, 14], // e
  [0, 6, 9, 8, 28, 8, 8, 8], // f
  [0, 0, 15, 17, 17, 15, 1, 14], // g
  [0, 16, 16, 22, 25, 17, 17, 17], // h
  [0, 4, 0, 4, 12, 4, 4, 14], // i
  [0, 2, 0, 6, 2, 2, 18, 12], // j
  [0, 16, 16, 18, 20, 24, 20, 18], // k
  [0, 12, 4, 4, 4, 4, 4, 31], // l
  [0, 0, 0, 26, 21, 21, 17, 17], // m
  [0, 0, 0, 22, 25, 17, 17, 17], // n
  [0, 0, 0, 14, 17, 17, 17, 14], // o
  [0, 0, 0, 30, 17, 30, 16, 16], // p
  [0, 0, 0, 13, 19, 15, 1, 1], // q
  [0, 0, 0, 22, 25, 16, 16, 16], // r
  [0, 0, 0, 14, 16, 14, 1, 30], // s
  [0, 8, 8, 28, 8, 8, 9, 6], // t
  [0, 0, 0, 17, 17, 17, 19, 13], // u
  [0, 0, 0, 17, 17, 17, 10, 4], // v
  [0, 0, 0, 17, 17, 21, 21, 10], // w
  [0, 0, 0, 17, 10, 4, 10, 17], // x
  [0, 0, 0, 17, 17, 15, 1, 14], // y
  [0, 0, 0, 31, 2, 4, 8, 31], // z
  [0, 2, 4, 4, 8, 4, 4, 2], // {
  [0, 4, 4, 4, 4, 4, 4, 4], // |
  [0, 8, 4, 4, 2, 4, 4, 8], // }
  [0, 0, 0, 0, 13, 18], // ~
  [0, 4, 10, 17, 17, 17, 31], // del

  [0, 31, 17, 16, 30, 17, 17, 30], // .B
  [15, 5, 5, 9, 17, 31, 17, 17], // .D
  [0, 21, 21, 21, 14, 21, 21, 21], // .Zh
  [0, 30, 1, 1, 6, 1, 1, 30], // .Z
  [0, 17, 17, 19, 21, 25, 17, 17], // .I
  [10, 4, 17, 19, 21, 25, 17, 17], // .J
  [0, 15, 5, 5, 5, 5, 21, 9], // .L
  [0, 31, 17, 17, 17, 17, 17, 17], // .P
  [0, 17, 17, 17, 10, 4, 8, 16], // .U
  [0, 17, 17, 17, 17, 17, 31, 1], // .Ts
  [0, 17, 17, 17, 15, 1, 1, 1], // .Ch
  [0, 0, 21, 21, 21, 21, 21, 31], // .Sh
  [0, 21, 21, 21, 21, 21, 31, 1], // .Sch
  [0, 24, 8, 8, 14, 9, 9, 14], // .'
  [0, 17, 17, 17, 25, 21, 21, 25], // .Y
  [0, 14, 17, 5, 11, 1, 17, 14], // .E
  [0, 0, 0, 9, 21, 18, 18, 13], // alpha
  [0, 4, 6, 5, 5, 4, 28, 28], // note
  [0, 31, 17, 16, 16, 16, 16, 16], // .G
  [0, 0, 0, 31, 10, 10, 10, 19], // pi
  [0, 31, 16, 8, 4, 8, 16, 31], // Sigma
  [0, 0, 0, 15, 18, 18, 18, 12], // sigma
  [6, 5, 7, 5, 5, 29, 27, 3], // notes
  [0, 0, 1, 14, 20, 4, 4, 2], // tau
  [0, 4, 14, 14, 14, 31, 4], // bell
  [0, 14, 17, 17, 31, 17, 17, 14], // Theta
  [0, 0, 14, 17, 17, 17, 10, 27], // Omega
  [0, 6, 9, 4, 10, 17, 17, 14], // delta
  [0, 0, 0, 11, 21, 26], // inf
  [0, 0, 10, 31, 31, 31, 14, 4], // heart
  [0, 0, 0, 14, 16, 12, 17, 14], // epsilon
  [0, 14, 17, 17, 17, 17, 17, 17],
  [0, 27, 27, 27, 27, 27, 27, 27],
  [0, 4, 0, 0, 4, 4, 4, 4], // !!
  [0, 4, 14, 20, 20, 21, 14, 4], // cent
  [0, 6, 8, 8, 28, 8, 9, 22], // pound
  [0, 0, 17, 14, 10, 14, 17], // money
  [0, 17, 10, 31, 4, 31, 4, 4], // yen
  [0, 4, 4, 4, 0, 4, 4, 4], // pipe
  [0, 6, 9, 4, 10, 4, 18, 12], // paragraph
  [0, 2, 5, 4, 31, 4, 20, 8], // f
  [0, 31, 17, 21, 23, 21, 17, 31], // (C)
  [0, 14, 1, 15, 17, 15, 0, 31], // a_
  [0, 0, 5, 10, 20, 10, 5], // <<
  [0, 18, 21, 21, 29, 21, 21, 18], // .Ju
  [0, 15, 17, 17, 15, 5, 9, 17], // .Ja
  [0, 31, 17, 21, 17, 19, 21, 31], // (R)
  [0, 4, 8, 12], // `
  [12, 18, 18, 18, 12], // 0
  [0, 4, 4, 31, 4, 4, 0, 31], // +-
  [12, 18, 4, 8, 30], // 2
  [28, 2, 12, 2, 28], // 3
  [28, 18, 28, 16, 18, 23, 18, 3], // Pt
  [0, 17, 17, 17, 19, 29, 16, 16], // mu
  [0, 15, 19, 19, 15, 3, 3, 3], // pilcrow
  [0, 0, 0, 0, 12, 12], // dot
  [0, 0, 0, 10, 17, 21, 21, 10], // omega
  [8, 24, 8, 8, 28], // 1
  [0, 14, 17, 17, 17, 14, 0, 31], // o_
  [0, 0, 20, 10, 5, 10, 20], // >>
  [17, 18, 20, 10, 22, 10, 15, 2], // 1/4
  [17, 18, 20, 10, 21, 1, 2, 7], // 1/2
  [24, 8, 24, 9, 27, 5, 7, 1], // 3/4
  [0, 4, 0, 4, 8, 16, 17, 14], // !?
  [8, 4, 4, 10, 17, 31, 17, 17], // A\
  [2, 4, 4, 10, 17, 31, 17, 17], // A/
  [4, 10, 0, 14, 17, 31, 17, 17], // A^
  [13, 18, 0, 14, 17, 31, 17, 17], // A~
  [10, 0, 4, 10, 17, 31, 17, 17], // A:
  [4, 10, 4, 10, 17, 31, 17, 17], // Ao
  [0, 7, 12, 20, 23, 28, 20, 23], // AE
  [14, 17, 16, 16, 17, 14, 2, 6], // C,
  [8, 4, 0, 31, 16, 30, 16, 31], // E\
  [2, 4, 0, 31, 16, 30, 16, 31], // E/
  [4, 10, 0, 31, 16, 30, 16, 31], // E^
  [0, 10, 0, 31, 16, 30, 16, 31], // E:
  [8, 4, 0, 14, 4, 4, 4, 14], // I\
  [2, 4, 0, 14, 4, 4, 4, 14], // I/
  [4, 10, 0, 14, 4, 4, 4, 14], // I^
  [0, 10, 0, 14, 4, 4, 4, 14], // I:
  [0, 14, 9, 9, 29, 9, 9, 14], // -D
  [13, 18, 0, 17, 25, 21, 19, 17], // N~
  [8, 4, 14, 17, 17, 17, 17, 14], // O\
  [2, 4, 14, 17, 17, 17, 17, 14], // O/
  [4, 10, 0, 14, 17, 17, 17, 14], // O^
  [13, 18, 0, 14, 17, 17, 17, 14], // O~
  [10, 0, 14, 17, 17, 17, 17, 14], // O:
  [0, 0, 17, 10, 4, 10, 17], // X
  [0, 14, 4, 14, 21, 14, 4, 14], // .F
  [8, 4, 17, 17, 17, 17, 17, 14], // U\
  [2, 4, 17, 17, 17, 17, 17, 14], // U/
  [4, 10, 0, 17, 17, 17, 17, 14], // U^
  [10, 0, 17, 17, 17, 17, 17, 14], // U:
  [2, 4, 17, 10, 4, 4, 4, 4], // Y/
  [24, 8, 14, 9, 9, 14, 8, 28], // -P
  [0, 6, 9, 9, 14, 9, 9, 22], // beta
  [8, 4, 0, 14, 1, 15, 17, 15], // a\
  [2, 4, 0, 14, 1, 15, 17, 15], // a/
  [4, 10, 0, 14, 1, 15, 17, 15], // a^
  [13, 18, 0, 14, 1, 15, 17, 15], // a~
  [0, 10, 0, 14, 1, 15, 17, 15], // a:
  [4, 10, 4, 14, 1, 15, 17, 15], // ao
  [0, 0, 26, 5, 15, 20, 21, 10], // ae
  [0, 0, 14, 16, 17, 14, 4, 12], // c,
  [8, 4, 0, 14, 17, 31, 16, 14], // e\
  [2, 4, 0, 14, 17, 31, 16, 14], // e/
  [4, 10, 0, 14, 17, 31, 16, 14], // e^
  [0, 10, 0, 14, 17, 31, 16, 14], // e:
  [8, 4, 0, 4, 12, 4, 4, 14], // i\
  [2, 4, 0, 4, 12, 4, 4, 14], // i/
  [4, 10, 0, 4, 12, 4, 4, 14], // i^
  [0, 10, 0, 4, 12, 4, 4, 14], // i:
  [0, 20, 8, 20, 2, 15, 17, 14], // -d
  [13, 18, 0, 22, 25, 17, 17, 17], // n~
  [8, 4, 0, 14, 17, 17, 17, 14], // o\
  [2, 4, 0, 14, 17, 17, 17, 14], // o/
  [0, 4, 10, 0, 14, 17, 17, 14], // o^
  [0, 13, 18, 0, 14, 17, 17, 14], // o~
  [0, 10, 0, 14, 17, 17, 17, 14], // o:
  [0, 0, 4, 0, 31, 0, 4], // :/
  [0, 2, 4, 14, 21, 14, 4, 8], // .f
  [8, 4, 0, 17, 17, 17, 19, 13], // u\
  [2, 4, 0, 17, 17, 17, 19, 13], // u/
  [4, 10, 0, 17, 17, 17, 19, 13], // u^
  [0, 10, 0, 17, 17, 17, 19, 13], // u:
  [2, 4, 0, 17, 17, 15, 1, 14], // y/
  [0, 12, 4, 6, 5, 6, 4, 14], // p-
  [0, 10, 0, 17, 17, 15, 1, 14] // y:
];


export default ({ params: [ instance, name ] }) => {
  const [state, setState] = useState({});

  instance.onStateChange((state) => {
    setState(state);
  });

  const posToAddr = (x, y) => {
    const shift = Number(state.shift);

    const minmax = (a, min, max) => {
      if (a < 0) {
        a = max + a + 1;
      } else {
        a = min + a;
        if (a > max) {
          a -= max - min;
        }
      }

      return a;
    }

    if (state.twoLines) {
      if (instance.size().h < 3) {
        if (y === 0) {
          return minmax(x + shift, 0x00, 0x27);
        } else {
          return minmax(x + shift, 0x40, 0x67);
        }
      } else {
        switch (y) {
          case 0: return minmax(x + shift, 0x00, 0x13);
          case 1: return minmax(x + shift, 0x40, 0x53);
          case 2: return minmax(x + shift, 0x14, 0x27);
          case 3: return minmax(x + shift, 0x54, 0x67);
          default: throw new Error('LCD may only have 4 lines')
        } ;
      }
    } else {
      return minmax(x + shift, 0x00, 0x4f);
    }
  };

  return <div className="widget">
    <h2>{name}</h2>
    <div className="lcd">
      {_.range(instance.size().h).map(cy => <div key={cy} className="line">
          {_.range(instance.size().w).map(cx => <div key={cx} className={`character ${(state.blink &&  Number(state.curaddr) === posToAddr(cx, cy)) && 'blink'} ${(!state.twoLines && cy > 0) && 'off'}`}>
            {_.range(10).map(y => <div key={y} className="pixelline">
              {_.range(5).map(x => {
                let on = false;
                if (state.display) {
                  if (y !== 8) {
                    if (y === 9) {
                      on = state.cursor && Number(state.curaddr) === posToAddr(cx, cy);
                    } else {
                      on = !!(eu[state.ram[posToAddr(cx, cy)]][y] & (1 << (4-x)))
                    }
                  }
                }
                return <div key={x} className={`pixel ${on && 'on'}`} />;
              })}
            </div>)}
          </div>)}
      </div>)}
    </div>
  </div>;
}
